# =============================================================================
# AI Weather Assistant - Complete Source Code
# =============================================================================
# Author: Generated by Cascade AI
# Description: A weather application with AI-powered insights and recommendations
# Files included:
#   - app.py: Main application file
#   - weather_ai.py: AI assistant implementation
#   - requirements.txt: Project dependencies
# =============================================================================

# =============================================================================
# File: app.py
# Description: Main application file with Streamlit UI and weather data handling
# =============================================================================

"""
Main application file for the AI Weather Assistant.
This file handles the user interface, weather data retrieval, and display logic.
"""

#!/usr/bin/env python3
import os
import streamlit as st
import requests
from dotenv import load_dotenv
from weather_ai import WeatherAI

# Load environment variables
load_dotenv()

# Configuration
WEATHER_API_KEY = os.getenv('WEATHER_API_KEY')
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
BASE_URL = "http://api.weatherapi.com/v1/current.json"

# Initialize AI assistant
try:
    weather_ai = WeatherAI(OPENAI_API_KEY)
    ai_enabled = True
except ValueError as e:
    st.warning("‚ö†Ô∏è " + str(e))
    ai_enabled = False
except Exception as e:
    st.error(f"Error initializing AI assistant: {str(e)}")
    ai_enabled = False

# Page configuration
st.set_page_config(
    page_title="AI Weather Assistant",
    page_icon="ü§ñ",
    layout="centered"
)

# Custom CSS
st.markdown("""
    <style>
    .main {
        padding: 2rem;
    }
    .stButton>button {
        width: 100%;
    }
    .weather-card {
        padding: 1.5rem;
        border-radius: 10px;
        background-color: #f0f2f6;
        margin-bottom: 1rem;
    }
    </style>
""", unsafe_allow_html=True)

def get_current_weather(city, aqi='yes'):
    """Retrieve current weather data for a given city."""
    if not city:
        return None
        
    url = f"{BASE_URL}?key={WEATHER_API_KEY}&q={city}&aqi={aqi}"
    try:
        response = requests.get(url)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        st.error(f"Error fetching data: {e}")
        return None

def display_weather_info(data):
    """Display weather information with AI insights."""
    if not data:
        return

    # Extract data
    location = data['location']
    current = data['current']
    
    city = location['name']
    country = location['country']
    temp = current['temp_c']
    feels_like = current['feelslike_c']
    condition = current['condition']['text']
    icon = f"http:{current['condition']['icon']}"
    
    # Display main weather information
    st.markdown('<div class="weather-card">', unsafe_allow_html=True)
    col1, col2 = st.columns([1, 3])
    
    with col1:
        st.image(icon, width=100)
        
    with col2:
        st.subheader(f"{city}, {country}")
        st.write(f"üå°Ô∏è {temp}¬∞C (Feels like: {feels_like}¬∞C)")
        st.write(f"‚òÅÔ∏è {condition}")

    # Get and display AI insights if enabled
    if ai_enabled:
        try:
            weather_summary = weather_ai.get_weather_summary(data)
            ai_insights = weather_ai.analyze_weather(data)
            
            # Display AI summary
            st.info(f"ü§ñ **AI Summary:** {weather_summary}")
            st.markdown('</div>', unsafe_allow_html=True)

            # Display AI insights
            st.markdown("### üß† AI Insights")
            
            col3, col4 = st.columns(2)
            
            with col3:
                st.markdown('<div class="weather-card">', unsafe_allow_html=True)
                st.markdown("**üìä Analysis**")
                st.write(ai_insights['analysis'])
                
                st.markdown("**üëï Recommendations**")
                st.write(ai_insights['recommendations'])
                st.markdown('</div>', unsafe_allow_html=True)
                
            with col4:
                st.markdown('<div class="weather-card">', unsafe_allow_html=True)
                st.markdown("**üéØ Suggested Activities**")
                st.write(ai_insights['activities'])
                
                st.markdown("**üí™ Health Advice**")
                st.write(ai_insights['health_advice'])
                st.markdown('</div>', unsafe_allow_html=True)
        except Exception as e:
            st.error(f"Error getting AI insights: {str(e)}")
    else:
        st.markdown('</div>', unsafe_allow_html=True)

    # Display additional weather details
    with st.expander("üìù Detailed Weather Information"):
        col5, col6 = st.columns(2)
        
        with col5:
            st.write(f"üí® Wind: {current['wind_kph']} km/h {current['wind_dir']}")
            st.write(f"üíß Humidity: {current['humidity']}%")
            
        with col6:
            st.write(f"üìç Position: {location['lat']}, {location['lon']}")
            st.write(f"üïí Last updated: {current['last_updated']}")

def main():
    """Main application function"""
    st.title('ü§ñ AI Weather Assistant')
    
    # Check for Weather API key
    if not WEATHER_API_KEY:
        st.error("‚ö†Ô∏è Please set up your Weather API key in the .env file!")
        st.code("""
        WEATHER_API_KEY=your_weather_api_key
        """)
        return

    # Display AI status
    if not ai_enabled:
        st.warning("‚ö†Ô∏è AI features are disabled. Add your OpenAI API key to enable AI insights.")
        st.code("""
        OPENAI_API_KEY=your_openai_api_key
        """)

    # City input
    city = st.text_input(
        "Enter a city name",
        placeholder="e.g., London, Tokyo, New York"
    )

    if city:
        with st.spinner('Fetching weather data...'):
            data = get_current_weather(city)
            if data:
                display_weather_info(data)
    
    # Attribution
    st.markdown(
        '<div style="text-align: center; padding: 20px;">'
        '<a href="https://www.weatherapi.com/" title="Free Weather API">'
        '<img src="http://cdn.weatherapi.com/v4/images/weatherapi_logo.png" '
        'alt="Weather data by WeatherAPI.com" border="0"></a>'
        '</div>',
        unsafe_allow_html=True
    )

if __name__ == "__main__":
    main()


# =============================================================================
# File: weather_ai.py
# Description: AI assistant implementation for weather analysis
# =============================================================================

"""
WeatherAI class implementation for providing AI-powered weather insights.
This file handles the interaction with OpenAI's API and processes weather data.
"""

import openai
from typing import Dict, Any
from tenacity import retry, stop_after_attempt, wait_exponential

class WeatherAI:
    def __init__(self, api_key: str):
        """Initialize the WeatherAI assistant with OpenAI API key."""
        if not api_key or api_key == "your_openai_api_key_here":
            raise ValueError("OpenAI API key is missing or invalid. Please set it in the .env file.")
        self.client = openai.OpenAI(api_key=api_key)

    def analyze_weather(self, weather_data: Dict[str, Any]) -> Dict[str, str]:
        """
        Analyze weather data and provide insights and recommendations.
        
        Args:
            weather_data: Dictionary containing weather information
            
        Returns:
            Dictionary containing analysis, recommendations, and activities
        """
        try:
            # Extract relevant weather information
            temp = weather_data['current']['temp_c']
            condition = weather_data['current']['condition']['text']
            humidity = weather_data['current']['humidity']
            wind_kph = weather_data['current']['wind_kph']
            
            # Create a prompt for the AI
            prompt = f"""Given the following weather conditions:
- Temperature: {temp}¬∞C
- Condition: {condition}
- Humidity: {humidity}%
- Wind Speed: {wind_kph} km/h

Please provide:
1. A brief analysis of the weather conditions
2. Recommendations for clothing and precautions
3. Suggested outdoor activities suitable for these conditions
4. Any weather-related health advice

Format the response as a JSON-like structure with keys: 'analysis', 'recommendations', 'activities', 'health_advice'
Keep each response concise (maximum 2 sentences per key)."""

            # Get AI response
            response = self.client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": "You are a helpful weather analysis assistant. Provide concise, practical advice based on weather conditions."},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.7,
                max_tokens=300
            )

            # Parse the response
            response_text = response.choices[0].message.content
            # Clean up the response to ensure it's properly formatted
            response_text = response_text.replace("```json", "").replace("```", "")
            
            # Convert the response into a structured format
            lines = response_text.strip().split('\n')
            result = {}
            current_key = None
            
            for line in lines:
                line = line.strip()
                if line.startswith('"') and ':' in line:
                    key = line.split('"')[1]
                    value = line.split(':')[1].strip().strip('"').strip(',').strip('"')
                    result[key] = value
                    
            return {
                'analysis': result.get('analysis', 'Weather analysis not available.'),
                'recommendations': result.get('recommendations', 'Recommendations not available.'),
                'activities': result.get('activities', 'Activity suggestions not available.'),
                'health_advice': result.get('health_advice', 'Health advice not available.')
            }
        except Exception as e:
            print(f"Error in analyze_weather: {str(e)}")
            return {
                'analysis': 'Unable to analyze weather conditions.',
                'recommendations': 'Recommendations unavailable.',
                'activities': 'Activity suggestions unavailable.',
                'health_advice': 'Health advice unavailable.'
            }

    def get_weather_summary(self, weather_data: Dict[str, Any]) -> str:
        """
        Generate a brief, natural language summary of the weather.
        
        Args:
            weather_data: Dictionary containing weather information
            
        Returns:
            A concise weather summary
        """
        try:
            prompt = f"""Current weather in {weather_data['location']['name']}:
Temperature: {weather_data['current']['temp_c']}¬∞C
Condition: {weather_data['current']['condition']['text']}
Humidity: {weather_data['current']['humidity']}%
Wind: {weather_data['current']['wind_kph']} km/h

Create a brief, natural-language summary of these weather conditions in one sentence."""

            response = self.client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": "You are a weather reporter. Provide brief, natural-sounding weather summaries."},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.7,
                max_tokens=100
            )
            
            return response.choices[0].message.content.strip()
        except Exception as e:
            print(f"Error in get_weather_summary: {str(e)}")
            return f"Currently {weather_data['current']['temp_c']}¬∞C with {weather_data['current']['condition']['text'].lower()} conditions."


# =============================================================================
# File: requirements.txt
# Description: Project dependencies
# =============================================================================

"""
streamlit>=1.29.0
requests>=2.31.0
python-dotenv>=1.0.0
openai>=1.3.0
python-dateutil>=2.8.2
tenacity>=8.2.3
"""

# =============================================================================
# File: .env
# Description: Environment variables configuration (template)
# =============================================================================

"""
WEATHER_API_KEY=your_weather_api_key_here
OPENAI_API_KEY=your_openai_api_key_here
"""
